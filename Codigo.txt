/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * <h2><center>&copy; Copyright (c) 2024 STMicroelectronics.
  * All rights reserved.</center></h2>
  *
  * This software component is licensed by ST under BSD 3-Clause license,
  * the "License"; You may not use this file except in compliance with the
  * License. You may obtain a copy of the License at:
  *                        opensource.org/licenses/BSD-3-Clause
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include "st7735.h"
#include "stdio.h"
#include "stdlib.h"
#include "time.h"
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
SPI_HandleTypeDef hspi1;

/* USER CODE BEGIN PV */

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_SPI1_Init(void);
/* USER CODE BEGIN PFP */
void ST7735_Init(void);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */



	HAL_Init();
  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_SPI1_Init();
  /* USER CODE BEGIN 2 */
  ST7735_Init();
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  Menu(9);
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
  hspi1.Init.Mode = SPI_MODE_MASTER;
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi1.Init.NSS = SPI_NSS_SOFT;
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi1.Init.CRCPolynomial = 10;
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ST7735_DC_Pin|ST7735_RES_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : ST7735_CS_Pin */
  GPIO_InitStruct.Pin = ST7735_CS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(ST7735_CS_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : ST7735_DC_Pin ST7735_RES_Pin */
  GPIO_InitStruct.Pin = ST7735_DC_Pin|ST7735_RES_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

  /*Configure GPIO pins : PA9 PA10 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

}

/* USER CODE BEGIN 4 */
void Menu(int bombas){
	ST7735_FillScreen(BLACK);
	ST7735_WriteString(30,5,"Campo Minado", Font_7x10, WHITE, BLACK);
	ST7735_WriteString(50,35,"Jogar", Font_7x10, WHITE, BLACK);
	ST7735_WriteString(50,55,"Bombas", Font_7x10, WHITE, BLACK);

	char escolha = 0;
	char menu = 1;
	while(menu){
		if (escolha == 0){
			ST7735_DrawLine(50,47,85,47,WHITE);
			if(!HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_11)){
				escolha = 1;
				ST7735_DrawLine(50,47,85,47,BLACK);
			}

			if(!HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_10)){
				Jogo(bombas,1);
			}
			HAL_Delay(150);
		}else{
			ST7735_DrawLine(50,67,92,67,WHITE);
			if(!HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_9)){
				escolha = 0;
				ST7735_DrawLine(50,67,92,67,BLACK);
			}

			if(!HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_10)){
				bombas = QuantBombs();

			}
			HAL_Delay(150);
		}
	}
}

int QuantBombs(){
	HAL_Delay(300);
	ST7735_FillScreen(BLACK);
	char QB = 1;
	int b = 9;
	while(QB){
		char WriteQB[2];
		sprintf(WriteQB, "%i", b);
		ST7735_WriteString(55,30,WriteQB, Font_16x26, WHITE, BLACK);

		if (!HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_11)){
			if (b < 21) b += 3;
			HAL_Delay(250);
			ST7735_FillRectangleFast(55,30,32,30,BLACK);
		}

		if (!HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_9)){
			if (b > 6) b -= 3;
			HAL_Delay(250);
			ST7735_FillRectangleFast(55,30,32,30,BLACK);
		}

		if (!HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_10)) {
			QB = 0;
			Menu(b);
		}
	}
}

void Jogo(int TB,char game){
	SetCampo();

	int bombs = 0;
	int totalbombs = TB;

	char matriz [6][4] = {{0,0,0,0,0,0},
						  {0,0,0,0,0,0},
						  {0,0,0,0,0,0},
						  {0,0,0,0,0,0}};
	while(bombs < TB){
		int h = rand()%7;
		int v = rand()%5;
		if(matriz[h][v] == 0){
			matriz[h][v] = 1;
			bombs++;
		}
	}

	int x = 3;
	int y = 17;
	int lastx = x;
	int lasty = y;
	char verif = 1;

	while (game)
	{
		//Desenhar quantidade de bandeiras
		char WriteBombs[2];
		sprintf(WriteBombs, "%i", bombs);
		ST7735_WriteString(133,15,WriteBombs, Font_7x10, WHITE, GREEN);

		//Verificar se as bandeiras estão em todas as bombas
		if (bombs == 0){
		  if (verif == 1){
			for(int h = 0;h < 6;h++){
			  for(int v = 0;v < 4;v++){
				if(matriz[h][v] == 2){
				  totalbombs--;
				}
			 }
		  }
		  verif = 0;
		  }
		}

		//Andar pelo Campo
		if(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_9)){
		  x += 20;
		  HAL_Delay(300);
		}

		//Localizão no campo
		if(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_11)){
		  x -= 20;
		  HAL_Delay(150);
		}

		  if (x >= 120){
			y += 20;
			x = 3;
			if (y >= 80){
				y = 17;
			}
		  }

		  if (x <= 0){
			y -= 20;
			x = 103;
			if (y <= 0){
				y = 77;
			}
		  }

		ST7735_DrawLine(x,y,x+16,y,WHITE);

		if (lastx != x){
		  ST7735_DrawLine(lastx,lasty,lastx+16,lasty,GREEN);
		  HAL_Delay(150);
		  lastx = x;
		  lasty = y;
		}

		ST7735_DrawLine(x,y,x+16,y,WHITE);

		if(!HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_10)){
		  if (matriz[(x)/20][(y)/20] == 1){
		  DesenharBomba(x,y);

		  game = 0;
		  HAL_Delay(2000);

		  }else if (matriz[(x)/20][(y)/20] == 0){
			//Verificar quantidade de bombas em volta
			char WriteDeLadinho[1];
			char DeLadinho = 0;

			if (matriz[((x)/20)+1][((y)/20)] == 1) DeLadinho++;
			if (matriz[((x)/20)-1][((y)/20)] == 1) DeLadinho++;
			if (matriz[((x)/20)][((y)/20)+1] == 1) DeLadinho++;
			if (matriz[((x)/20)][((y)/20)-1] == 1) DeLadinho++;
			if (matriz[((x)/20)+1][((y)/20)+1] == 1) DeLadinho++;
			if (matriz[((x)/20)+1][((y)/20)-1] == 1) DeLadinho++;
			if (matriz[((x)/20)-1][((y)/20)+1] == 1) DeLadinho++;
			if (matriz[((x)/20)-1][((y)/20)-1] == 1) DeLadinho++;


			sprintf(WriteDeLadinho, "%i", DeLadinho);
			ST7735_WriteString(x+3,y-11,WriteDeLadinho, Font_7x10, WHITE, GREEN);
		  }
		}

		if(!HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_12)){
		  if (bombs >= 0){
			if ((matriz[(x)/20][(y)/20] == 2) || (matriz[(x)/20][(y)/20] == 3)){
			  ST7735_FillRectangleFast(x-1,y-15,19,19,GREEN);

			  bombs++;
			  matriz[(x)/20][(y)/20] = (matriz[(x)/20][(y)/20] == 2)? 1 : 0;
			  HAL_Delay(250);
			  }else{
			  DesenharBandeira(x,y);

			  bombs--;
			  matriz[(x)/20][(y)/20] = (matriz[(x)/20][(y)/20] == 1)? 2 : 3;
			  HAL_Delay(250);
			  }
		   }
		}

		if (totalbombs == 0){
		  game = 0;
		  HAL_Delay(2000);
		  }
		}
	Menu(9);
}

void SetCampo(void){
	  ST7735_FillScreen(GREEN);
	  for(int i = 1;i <= 121;i+=20){
		  ST7735_DrawLine(i,80,i,0,WHITE);
		  ST7735_DrawLine(0,i,120,i,WHITE);
	  }
	  for(int o = 1;o <= 121;o+=20){
		  ST7735_DrawLine(o,80,o,0,WHITE);
		  ST7735_DrawLine(0,o,120,o,WHITE);
	  }
	  ST7735_DrawLine(0,79,120,79,WHITE);
	  ST7735_WriteString(123,5,"BOMBS", Font_7x10, WHITE, GREEN);
}

void DesenharBomba(int h,int v){
	 ST7735_DrawLine(h+2,v-7,h+12,v-7,BLACK);
	 ST7735_DrawLine(h+7,v-2,h+7,v-12,BLACK);
	 ST7735_DrawLine(h+3,v-11,h+10,v-3,BLACK);
	 ST7735_DrawLine(h+3,v-3,h+10,v-11,BLACK);
	 ST7735_FillRectangleFast(h+5,v-11,5,9,BLACK);
	 ST7735_FillRectangleFast(h+3,v-9,9,5,BLACK);
}

void DesenharBandeira(int h,int v){
	 ST7735_FillRectangleFast(h+3, v-4, 10, 2, BLACK);
	 ST7735_DrawLine(h+5,v-5,h+9,v-5,BLACK);
	 ST7735_DrawLine(h+8,v-5,h+8,v-8,BLACK);
	 ST7735_FillRectangleFast(h+7,v-13,2,5,RED);
	 ST7735_FillRectangleFast(h+5,v-12,2,3,RED);
	 ST7735_DrawLine(h+4,v-11,h+4,v-11,RED);
}
/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */

/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
